[
  {
    "language": "C++",
    "code": "\n#ifndef ZEPHYR_SUBSYS_USBC_PRL_H_\n#define ZEPHYR_SUBSYS_USBC_PRL_H_\n\n#include <zephyr/kernel.h>\n#include <zephyr/usb_c/usbc.h>\n#include <zephyr/drivers/usb_c/usbc_tcpc.h>\n#include <zephyr/smf.h>\n\n#include \"usbc_pe_common_internal.h\"\n#include \"usbc_timer.h\"\n\n/**\n * @brief PD counter definitions\n *\t  See Table 6-63 Counter parameters\n *\t  Parameter Name: nMessageIDCount\n */\n#define PD_MESSAGE_ID_COUNT 7\n\n/**\n * @brief Message Reception State Machine Object\n */\nstruct protocol_layer_rx_t {\n\t/** state machine flags */\n\tatomic_t flags;\n\t/** message ids for all valid port partners */\n\tint msg_id[NUM_SOP_STAR_TYPES];\n\t/** Received Power Delivery Messages are stored in emsg */\n\tstruct pd_msg emsg;\n};\n\n/**\n * @brief Message Transmission State Machine Object\n */\nstruct protocol_layer_tx_t {\n\t/** state machine context */\n\tstruct smf_ctx ctx;\n\t/** Port device */\n\tconst struct device *dev;\n\t/** state machine flags */\n\tatomic_t flags;\n\t/** last packet type we transmitted */\n\tenum pd_packet_type last_xmit_type;\n\t/** Current message type to transmit */\n\tuint8_t msg_type;\n\t/**\n\t * Power Delivery Messages meant for transmission are stored\n\t * in emsg\n\t */\n\tstruct pd_msg emsg;\n\n\t/* Counters */\n\n\t/** message id counters for all 6 port partners */\n\tuint32_t msg_id_counter[NUM_SOP_STAR_TYPES];\n\n\t/* Timers */\n\n\t/** tTxTimeout timer */\n\tstruct usbc_timer_t pd_t_tx_timeout;\n\t/** tSinkTx timer */\n\tstruct usbc_timer_t pd_t_sink_tx;\n};\n\n/**\n * @brief Hard Reset State Machine Object\n */\nstruct protocol_hard_reset_t {\n\t/** state machine context */\n\tstruct smf_ctx ctx;\n\t/** Port device */\n\tconst struct device *dev;\n\t/** state machine flags */\n\tatomic_t flags;\n\n\t/* Timers */\n\n\t/** tHardResetComplete timer */\n\tstruct usbc_timer_t pd_t_hard_reset_complete;\n};\n\n/**\n * @brief This function must only be called in the subsystem init function.\n *\n * @param dev Pointer to the device structure for the driver instance.\n */\nvoid prl_subsys_init(const struct device *dev);\n\n/**\n * @brief Start the PRL Layer state machine. This is only called from the\n *\t  Type-C state machine.\n *\n * @param dev Pointer to the device structure for the driver instance\n */\nvoid prl_start(const struct device *dev);\n\n/**\n * @brief Inform the PRL that the first message in an AMS is being sent\n *\n * @param dev Pointer to the device structure for the driver instance\n */\nvoid prl_first_msg_notificaiton(const struct device *dev);\n\n/**\n * @brief Suspends the PRL Layer state machine. This is only called from the\n *\t  Type-C state machine.\n *\n * @param dev Pointer to the device structure for the driver instance\n */\nvoid prl_suspend(const struct device *dev);\n\n/**\n * @brief Reset the PRL Layer state machine\n *\n * @param dev Pointer to the device structure for the driver instance\n */\nvoid prl_reset(const struct device *dev);\n\n/**\n * @brief Run the PRL Layer state machine. This is called from the subsystems\n *\t  port stack thread\n *\n * @param dev Pointer to the device structure for the driver instance\n */\nvoid prl_run(const struct device *dev);\n\n/**\n * @brief Called from the Policy Engine to signal that a hard reset is complete\n *\n * @param dev Pointer to the device structure for the driver instance\n */\nvoid prl_hard_reset_complete(const struct device *dev);\n\n/**\n * @brief Sets the revision received from the port partner\n *\n * @param dev Pointer to the device structure for the driver instance\n * @param type SOP* packet sent from port partner\n * @param rev Revision sent from the port partner\n */\nvoid prl_set_rev(const struct device *dev, const enum pd_packet_type type,\n\t\t const enum pd_rev_type rev);\n\n/**\n * @brief Gets the revision received assciated with a packet type\n *\n * @param dev Pointer to the device structure for the driver instance\n * @param type SOP* packet type to get the revision for\n *\n * @retval revsion associated with the packet type\n */\nenum pd_rev_type prl_get_rev(const struct device *dev, const enum pd_packet_type type);\n\n/**\n * @brief Instructs the Protocol Layer to send a Power Delivery control message\n *\n * @param dev Pointer to the device structure for the driver instance\n * @param type The port partner to send this message to\n * @param msg The control message to send\n */\nvoid prl_send_ctrl_msg(const struct device *dev, const enum pd_packet_type type,\n\t\t       const enum pd_ctrl_msg_type msg);\n\n/**\n * @brief Instructs the Protocol Layer to send a Power Delivery data message\n *\n * @param dev Pointer to the device structure for the driver instance\n * @param type The port partner to send this message to\n * @param msg The data message to send\n */\nvoid prl_send_data_msg(const struct device *dev, const enum pd_packet_type type,\n\t\t       const enum pd_data_msg_type msg);\n\n/**\n * @brief Instructs the Protocol Layer to execute a hard reset\n *\n * @param dev Pointer to the device structure for the driver instance\n */\nvoid prl_execute_hard_reset(const struct device *dev);\n\n/**\n * @brief Query if the Protocol Layer is running\n *\n * @param dev Pointer to the device structure for the driver instance\n *\n * @retval TRUE if the Protocol Layer is running\n * @retval FALSE if the Protocol Layer is not running\n */\nbool prl_is_running(const struct device *dev);\n\n#endif /* ZEPHYR_SUBSYS_USBC_PRL_H_ */",
    "repo": "zephyrproject-rtos/zephyr",
    "path": "/base/datasets/diagrams-repos/zephyrproject-rtos/zephyr/subsys/usb/usb_c/usbc_prl.h",
    "query": "What is the sequence of operations when the PRL starts and runs its state machine?",
    "diagram": "{'nodes': [{'type': 'function', 'name': 'prl_subsys_init', 'node_id': 'prl_subsys_init', 'description': 'Initializes the PRL subsystem', 'visibility': 'public', 'return_type': 'void', 'params': 'const struct device *dev', 'source_class_id': None}, {'type': 'function', 'name': 'prl_start', 'node_id': 'prl_start', 'description': 'Starts the PRL Layer state machine', 'visibility': 'public', 'return_type': 'void', 'params': 'const struct device *dev', 'source_class_id': None}, {'type': 'function', 'name': 'prl_run', 'node_id': 'prl_run', 'description': 'Runs the PRL Layer state machine', 'visibility': 'public', 'return_type': 'void', 'params': 'const struct device *dev', 'source_class_id': None}, {'type': 'function', 'name': 'prl_reset', 'node_id': 'prl_reset', 'description': 'Resets the PRL Layer state machine', 'visibility': 'public', 'return_type': 'void', 'params': 'const struct device *dev', 'source_class_id': None}, {'type': 'function', 'name': 'prl_suspend', 'node_id': 'prl_suspend', 'description': 'Suspends the PRL Layer state machine', 'visibility': 'public', 'return_type': 'void', 'params': 'const struct device *dev', 'source_class_id': None}, {'type': 'class', 'name': 'protocol_layer_tx_t', 'node_id': 'protocol_layer_tx_t', 'description': 'Message Transmission State Machine', 'visibility': 'public', 'return_type': None, 'params': None, 'source_class_id': None}, {'type': 'class', 'name': 'protocol_layer_rx_t', 'node_id': 'protocol_layer_rx_t', 'description': 'Message Reception State Machine', 'visibility': 'public', 'return_type': None, 'params': None, 'source_class_id': None}, {'type': 'class', 'name': 'protocol_hard_reset_t', 'node_id': 'protocol_hard_reset_t', 'description': 'Hard Reset State Machine', 'visibility': 'public', 'return_type': None, 'params': None, 'source_class_id': None}, {'type': 'entity', 'name': 'stateMachine', 'node_id': 'stateMachine', 'description': 'Protocol Layer State Machine', 'visibility': 'public', 'return_type': None, 'params': None, 'source_class_id': None}, {'type': 'function', 'name': 'prl_send_ctrl_msg', 'node_id': 'prl_send_ctrl_msg', 'description': 'Sends PD control message', 'visibility': 'public', 'return_type': 'void', 'params': 'const struct device *dev, const enum pd_packet_type type, const enum pd_ctrl_msg_type msg', 'source_class_id': None}, {'type': 'function', 'name': 'prl_send_data_msg', 'node_id': 'prl_send_data_msg', 'description': 'Sends PD data message', 'visibility': 'public', 'return_type': 'void', 'params': 'const struct device *dev, const enum pd_packet_type type, const enum pd_data_msg_type msg', 'source_class_id': None}], 'edges': [{'node_id_from': 'prl_subsys_init', 'node_id_to': 'stateMachine', 'description': 'initializes subsystem'}, {'node_id_from': 'prl_start', 'node_id_to': 'stateMachine', 'description': 'starts'}, {'node_id_from': 'prl_run', 'node_id_to': 'stateMachine', 'description': 'executes'}, {'node_id_from': 'prl_reset', 'node_id_to': 'stateMachine', 'description': 'resets'}, {'node_id_from': 'prl_suspend', 'node_id_to': 'stateMachine', 'description': 'suspends'}, {'node_id_from': 'stateMachine', 'node_id_to': 'protocol_layer_tx_t', 'description': 'manages'}, {'node_id_from': 'stateMachine', 'node_id_to': 'protocol_layer_rx_t', 'description': 'manages'}, {'node_id_from': 'stateMachine', 'node_id_to': 'protocol_hard_reset_t', 'description': 'manages'}, {'node_id_from': 'prl_send_ctrl_msg', 'node_id_to': 'protocol_layer_tx_t', 'description': 'uses'}, {'node_id_from': 'prl_send_data_msg', 'node_id_to': 'protocol_layer_tx_t', 'description': 'uses'}], 'packages': [{'package_id': 'protocolLayer', 'children': ['controlFunctions', 'stateObjects', 'messagingFunctions'], 'description': 'Protocol Layer components'}, {'package_id': 'controlFunctions', 'children': ['prl_subsys_init', 'prl_start', 'prl_run', 'prl_reset', 'prl_suspend'], 'description': 'State machine control functions'}, {'package_id': 'stateObjects', 'children': ['protocol_layer_tx_t', 'protocol_layer_rx_t', 'protocol_hard_reset_t', 'stateMachine'], 'description': 'State machine objects'}, {'package_id': 'messagingFunctions', 'children': ['prl_send_ctrl_msg', 'prl_send_data_msg'], 'description': 'Message handling functions'}]}",
    "version": "full",
    "text_answer": "The PRL state machine sequence starts with prl_subsys_init for initialization, followed by prl_start to activate the state machine. The actual execution happens through repeated calls to prl_run in the port stack thread, which manages both transmission (protocol_layer_tx_t) and reception (protocol_layer_rx_t) state machines.",
    "possible_versions": [
      "full"
    ]
  },
  {
    "language": "TypeScript",
    "code": "\nimport { ImageResponse } from '@vercel/og';\nimport { env } from '../../utils/env';\nimport { fetchFont } from '../../utils/fetchFont';\n\nexport const config = {\n  runtime: 'edge',\n};\n\nconst fetchGithubStars = async () => {\n  const data = await (\n    await fetch('https://api.github.com/repos/trpc/trpc', {\n      headers: { authorization: `Bearer ${env.GITHUB_TOKEN}` },\n    })\n  ).json();\n  if (typeof data?.stargazers_count !== 'number')\n    throw new Error('Could not fetch stars');\n  return new Intl.NumberFormat().format(data.stargazers_count);\n};\n\nconst fetchNpmDownloads = async () => {\n  const data = await (\n    await fetch('https://api.npmjs.org/downloads/point/last-week/@trpc/server')\n  ).json();\n  if (typeof data?.downloads !== 'number')\n    throw new Error('Could not fetch npm downloads');\n  return new Intl.NumberFormat().format(data.downloads);\n};\n\n// const fetchTwitterFollowers = async () => {\n//   const data = await (\n//     await fetch(\n//       'https://api.twitter.com/2/users/1353123577193779201?user.fields=public_metrics',\n//       {\n//         headers: { authorization: `Bearer ${env.TWITTER_BEARER_TOKEN}` },\n//       },\n//     )\n//   ).json();\n//   if (typeof data?.data?.public_metrics?.followers_count !== 'number')\n//     throw new Error('Could not fetch twitter followers');\n//   return new Intl.NumberFormat().format(\n//     data?.data?.public_metrics?.followers_count,\n//   );\n// };\n\nexport default async (_req: Request) => {\n  const [inter800, inter700, ghStars, npmDownloads /**, twitterFollowers */] =\n    await Promise.all([\n      fetchFont('Inter', 800, 'tRPC   Move Fast and Break Nothing'),\n      fetchFont(\n        'Inter',\n        700,\n        'End-to-end typesafe APIs made easy. 0123456789,',\n      ),\n      fetchGithubStars(),\n      fetchNpmDownloads(),\n      // fetchTwitterFollowers(),\n    ]);\n\n  return new ImageResponse(\n    (\n      <div\n        tw=\"bg-zinc-900 h-full w-full text-white bg-cover flex flex-col p-14\"\n        style={{ fontFamily: 'Inter' }}\n      >\n        <img\n          src=\"https://assets.trpc.io/www/og-pattern-dark.svg\"\n          alt=\"background\"\n          tw=\"absolute\"\n        />\n        <div tw=\"flex flex-col justify-center items-center w-full h-full\">\n          <div tw=\"flex items-center\">\n            <img\n              src=\"https://assets.trpc.io/icons/svgs/blue-bg-rounded.svg\"\n              width=\"128px\"\n              height=\"128px\"\n              alt=\"tRPC logo\"\n            />\n            <h1 tw=\"text-8xl ml-8 font-extrabold\">tRPC</h1>\n          </div>\n          <div tw=\"flex flex-col items-center\">\n            <p tw=\"text-center pt-6 text-6xl font-extrabold\">\n              Move Fast and Break Nothing\n            </p>\n            <p tw=\"text-center pt-3 text-4xl text-zinc-300 font-bold mt-0\">\n              End-to-end typesafe APIs made easy.\n            </p>\n          </div>\n          <div tw=\"flex items-center text-zinc-300\">\n            <div tw=\"flex items-center mx-8\">\n              <div tw=\"flex items-center mx-8\">\n                <svg\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  height={36}\n                  fill=\"#fff\"\n                  viewBox=\"0 0 512 512\"\n                >\n                  <path d=\"M256 32C132.3 32 32 134.9 32 261.7c0 101.5 64.2 187.5 153.2 217.9a17.56 17.56 0 003.8.4c8.3 0 11.5-6.1 11.5-11.4 0-5.5-.2-19.9-.3-39.1a102.4 102.4 0 01-22.6 2.7c-43.1 0-52.9-33.5-52.9-33.5-10.2-26.5-24.9-33.6-24.9-33.6-19.5-13.7-.1-14.1 1.4-14.1h.1c22.5 2 34.3 23.8 34.3 23.8 11.2 19.6 26.2 25.1 39.6 25.1a63 63 0 0025.6-6c2-14.8 7.8-24.9 14.2-30.7-49.7-5.8-102-25.5-102-113.5 0-25.1 8.7-45.6 23-61.6-2.3-5.8-10-29.2 2.2-60.8a18.64 18.64 0 015-.5c8.1 0 26.4 3.1 56.6 24.1a208.21 208.21 0 01112.2 0c30.2-21 48.5-24.1 56.6-24.1a18.64 18.64 0 015 .5c12.2 31.6 4.5 55 2.2 60.8 14.3 16.1 23 36.6 23 61.6 0 88.2-52.4 107.6-102.3 113.3 8 7.1 15.2 21.1 15.2 42.5 0 30.7-.3 55.5-.3 63 0 5.4 3.1 11.5 11.4 11.5a19.35 19.35 0 004-.4C415.9 449.2 480 363.1 480 261.7 480 134.9 379.7 32 256 32z\" />\n                </svg>\n                <p tw=\"text-3xl font-bold ml-2\">{ghStars}</p>\n              </div>\n\n              {/* <div tw=\"flex items-center mx-8\">\n                <svg\n                  stroke=\"#fff\"\n                  fill=\"#fff\"\n                  viewBox=\"0 0 24 24\"\n                  height={32}\n                  width={32}\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                >\n                  <path d=\"M23.953 4.57a10 10 0 01-2.825.775 4.958 4.958 0 002.163-2.723c-.951.555-2.005.959-3.127 1.184a4.92 4.92 0 00-8.384 4.482C7.69 8.095 4.067 6.13 1.64 3.162a4.822 4.822 0 00-.666 2.475c0 1.71.87 3.213 2.188 4.096a4.904 4.904 0 01-2.228-.616v.06a4.923 4.923 0 003.946 4.827 4.996 4.996 0 01-2.212.085 4.936 4.936 0 004.604 3.417 9.867 9.867 0 01-6.102 2.105c-.39 0-.779-.023-1.17-.067a13.995 13.995 0 007.557 2.209c9.053 0 13.998-7.496 13.998-13.985 0-.21 0-.42-.015-.63A9.935 9.935 0 0024 4.59z\" />\n                </svg>\n                <p tw=\"text-3xl font-bold ml-2\">{twitterFollowers}</p>\n              </div> */}\n\n              <div tw=\"flex items-center mx-8\">\n                {/* <svg\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  stroke=\"#fff\"\n                  fill=\"#fff\"\n                  height={48}\n                  viewBox=\"0 0 512 512\"\n                >\n                  <path d=\"M227.6 213.1H256v57.1h-28.4z\" />\n                  <path d=\"M0 156v171.4h142.2V356H256v-28.6h256V156zm142.2 142.9h-28.4v-85.7H85.3v85.7H28.4V184.6h113.8zm142.2 0h-56.9v28.6h-56.9V184.6h113.8zm199.2 0h-28.4v-85.7h-28.4v85.7h-28.4v-85.7H370v85.7h-56.9V184.6h170.7v114.3z\" />\n                </svg> */}\n                <svg\n                  role=\"img\"\n                  stroke=\"#fff\"\n                  fill=\"#fff\"\n                  height={32}\n                  viewBox=\"0 0 24 24\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                >\n                  <path d=\"M1.763 0C.786 0 0 .786 0 1.763v20.474C0 23.214.786 24 1.763 24h20.474c.977 0 1.763-.786 1.763-1.763V1.763C24 .786 23.214 0 22.237 0zM5.13 5.323l13.837.019-.009 13.836h-3.464l.01-10.382h-3.456L12.04 19.17H5.113z\" />\n                </svg>\n                <p tw=\"text-3xl font-bold ml-2\">{npmDownloads}</p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    ),\n    {\n      headers: {\n        'Cache-Control': 's-maxage=86400, stale-while-revalidate',\n      },\n      width: 1200,\n      height: 600,\n      fonts: [\n        { name: 'Inter', data: inter800, weight: 800 },\n        { name: 'Inter', data: inter700, weight: 700 },\n      ],\n    },\n  );\n};",
    "repo": "trpc/trpc",
    "path": "/base/datasets/diagrams-repos/trpc/trpc/www/og-image/pages/api/landing.tsx",
    "query": "How are the different data sources (GitHub stars, npm downloads, Twitter followers) integrated into the OG image generation process?",
    "diagram": "{'nodes': [{'type': 'function', 'name': 'fetchGithubStars', 'node_id': 'fetchGithubStars', 'description': 'Fetches star count from GitHub API', 'visibility': 'private', 'return_type': 'Promise<string>', 'params': '', 'source_class_id': None}, {'type': 'function', 'name': 'fetchNpmDownloads', 'node_id': 'fetchNpmDownloads', 'description': 'Fetches download count from npm API', 'visibility': 'private', 'return_type': 'Promise<string>', 'params': '', 'source_class_id': None}, {'type': 'function', 'name': 'fetchTwitterFollowers', 'node_id': 'fetchTwitterFollowers', 'description': 'Fetches number of Twitter followers (commented out)', 'visibility': 'public', 'return_type': 'Promise<string>', 'params': '', 'source_class_id': None}, {'type': 'function', 'name': 'fetchFont', 'node_id': 'fetchFont', 'description': 'Fetches font for image rendering', 'visibility': 'private', 'return_type': 'Promise<ArrayBuffer>', 'params': 'name: string, weight: number, text: string', 'source_class_id': None}, {'type': 'function', 'name': 'default', 'node_id': 'default', 'description': 'Main function generating OG image with stats', 'visibility': 'public', 'return_type': 'Promise<ImageResponse>', 'params': '_req: Request', 'source_class_id': None}, {'type': 'entity', 'name': 'ImageResponse', 'node_id': 'ImageResponse', 'description': \"Vercel's OG image generation component\", 'visibility': 'public', 'return_type': None, 'params': None, 'source_class_id': None}], 'edges': [{'node_id_from': 'default', 'node_id_to': 'fetchGithubStars', 'description': 'calls to get GitHub stats'}, {'node_id_from': 'default', 'node_id_to': 'fetchNpmDownloads', 'description': 'calls to get npm stats'}, {'node_id_from': 'default', 'node_id_to': 'fetchTwitterFollowers', 'description': 'calls to get twitter followers (commented out)'}, {'node_id_from': 'default', 'node_id_to': 'fetchFont', 'description': 'calls to load fonts'}, {'node_id_from': 'default', 'node_id_to': 'ImageResponse', 'description': 'creates image'}], 'packages': [{'package_id': 'dataFetching', 'children': ['fetchGithubStars', 'fetchNpmDownloads', 'fetchTwitterFollowers'], 'description': 'Data fetching functions'}, {'package_id': 'imageGeneration', 'children': ['ImageResponse', 'fetchFont'], 'description': 'Image generation related components'}]}",
    "version": "average",
    "text_answer": "The OG image integrates data from external sources through separate async functions: fetchGithubStars fetches repository stars from GitHub API, fetchNpmDownloads retrieves weekly download counts from npm, and there's a commented-out fetchTwitterFollowers function. These data points are fetched concurrently using Promise.all and then rendered into the final image using Vercel's ImageResponse.",
    "possible_versions": [
      "average"
    ]
  },
  {
    "language": "JavaScript",
    "code": "\n'use strict';\n\n$(document).ready(function () {\n  var $accordionToggler = $(this).find('[data-toggle=\"collapseAccordion\"]');\n  $accordionToggler.off('click').on('click', function (event) {\n    var $this = $(this);\n    $this.siblings('.panel-body').slideToggle(500);\n    $this.children().children('.panel-toggle').toggleClass('fa-angle-down fa-angle-up');\n    event.stopPropagation();\n    return false;\n  });\n});\n'use strict';\n\n(function ($) {\n\n  /**\n   * jQuery plugin for navigation bars\n   * Usage:\n   * <pre>\n   *   $('.navigation-bar').navigationBar();\n   * </pre>\n   *\n   * @param {object} options see <code>$.fn.navigationBar.defaults</code>\n   * @returns {$}\n   */\n\n  $.fn.navigationBar = function (options) {\n\n    var settings = $.extend({}, $.fn.navigationBar.defaults, options);\n\n    return this.each(function () {\n      var _this = this;\n\n      var containerSelector = '.navigation-bar-container';\n      var $navigationContainer = $(this).find(containerSelector);\n      var $sideNavToggler = $(this).find('[data-toggle=' + settings.navBarToggleDataAttr + ']');\n      var $subMenuToggler = $(this).find('[data-toggle=' + settings.subMenuNavToggleDataAttr + ']');\n      var firstLvlMenuItemsSelector = '.side-nav-menu>li';\n      var secondLvlMenuItemsSelector = '.side-nav-menu>li>ul>li';\n      var $moreActions = $(this).find('.more-actions');\n      var $dropdownMenu = $moreActions.children('.dropdown-menu');\n\n      $subMenuToggler.each(function (index, toggler) {\n        return $(toggler).parent().addClass('has-sub-menu');\n      });\n\n      if (settings.fitHeight) {\n        $(this).addClass('navigation-bar-fit-height');\n\n        // make scrolling effect on side nav ONLY, i.e. not effected on ambari main contents\n        $(this).find('.side-nav-menu').on('DOMMouseScroll mousewheel', function (ev) {\n          var $this = $(this),\n              scrollTop = this.scrollTop,\n              scrollHeight = this.scrollHeight,\n              height = $this.innerHeight(),\n              delta = ev.originalEvent.wheelDelta,\n              up = delta > 0;\n          var prevent = function prevent() {\n            ev.stopPropagation();\n            ev.preventDefault();\n            ev.returnValue = false;\n            return false;\n          };\n\n          if (!up && -delta > scrollHeight - height - scrollTop) {\n            // Scrolling down, but this will take us past the bottom.\n            $this.scrollTop(scrollHeight);\n            return prevent();\n          } else if (up && delta > scrollTop) {\n            // Scrolling up, but this will take us past the top.\n            $this.scrollTop(0);\n            return prevent();\n          }\n        });\n      }\n\n      //set main content left margin based on the width of side-nav\n      var containerWidth = $navigationContainer.width();\n      if (settings.moveLeftContent) {\n        $(settings.content).css('margin-left', containerWidth);\n      }\n      if (settings.moveLeftFooter) {\n        $(settings.footer).css('margin-left', containerWidth);\n      }\n\n      function popStateHandler() {\n        var path = window.location.pathname + window.location.hash;\n        $navigationContainer.find('li a').each(function (index, link) {\n          var $link = $(link);\n          var href = $link.attr('data-href') || $link.attr('href');\n          if (path.indexOf(href) !== -1 && ['', '#'].indexOf(href) === -1) {\n            $link.parent().addClass('active');\n          } else {\n            $link.parent().removeClass('active');\n          }\n        });\n      }\n\n      if (settings.handlePopState) {\n        popStateHandler();\n        $(window).bind('popstate', popStateHandler);\n      }\n\n      function clickHandler(el) {\n        var $li = $(el).parent();\n        var activeClass = settings.activeClass;\n\n        var activeMenuItems = firstLvlMenuItemsSelector + '.' + activeClass;\n        var activeSubMenuItems = secondLvlMenuItemsSelector + '.' + activeClass;\n        $navigationContainer.find(activeMenuItems).removeClass(activeClass);\n        $navigationContainer.find(activeSubMenuItems).removeClass(activeClass);\n        $li.addClass(activeClass);\n      }\n\n      /**\n       * Click on menu item\n       */\n      $(firstLvlMenuItemsSelector + '>a').on('click', function () {\n        clickHandler(this);\n      });\n\n      /**\n       * Click on sub menu item\n       */\n      $(secondLvlMenuItemsSelector + '>a').on('click', function () {\n        clickHandler(this);\n        $(this).parent().parent().parent().addClass(settings.activeClass);\n      });\n\n      /**\n       * Slider for sub menu\n       */\n      $subMenuToggler.off('click').on('click', function (event) {\n        // ignore click if navigation-bar is collapsed\n        if ($navigationContainer.hasClass('collapsed')) {\n          return false;\n        }\n        var $this = $(this);\n        $this.siblings('.sub-menu').slideToggle(600, function () {\n          var $topMenuItem = $this.parent();\n          var $subMenu = $topMenuItem.find('ul');\n          return $subMenu.is(':visible') ? $topMenuItem.removeClass('collapsed') : $topMenuItem.addClass('collapsed');\n        });\n        $this.children('.toggle-icon').toggleClass(settings.menuLeftClass + ' ' + settings.menuDownClass);\n        event.stopPropagation();\n        return false;\n      });\n\n      /**\n       * Hovering effects for \"more actions icon\": \"...\"\n       */\n      $(this).find('.mainmenu-li>a').hover(function () {\n        var $moreIcon = $(this).siblings('.more-actions');\n        if ($moreIcon.length && !$navigationContainer.hasClass('collapsed')) {\n          $moreIcon.css('display', 'inline-block');\n        }\n      }, function () {\n        var $moreIcon = $(this).siblings('.more-actions');\n        if ($moreIcon.length && !$navigationContainer.hasClass('collapsed')) {\n          $moreIcon.hide();\n        }\n      });\n      $moreActions.hover(function () {\n        $(this).css('display', 'inline-block');\n      });\n      if (settings.fitHeight) {\n        $moreActions.on('click', function () {\n          // set actions submenu position\n          var $moreIcon = $(this);\n          var $header = $('.side-nav-header');\n          $dropdownMenu.css({\n            top: $moreIcon.offset().top - $header.offset().top + 20 + 'px',\n            left: $moreIcon.offset().left + 'px'\n          });\n        });\n      }\n      $dropdownMenu.on('click', function () {\n        // some action was triggered, should hide this icon\n        var moreIcon = $(this).parent();\n        setTimeout(function () {\n          moreIcon.hide();\n        }, 1000);\n      });\n      $navigationContainer.children('.side-nav-menu').scroll(function () {\n        $moreActions.removeClass('open');\n      });\n\n      /**\n       * Expand/collapse navigation bar\n       */\n      $sideNavToggler.click(function () {\n\n        $navigationContainer.toggleClass('collapsed').promise().done(function () {\n          var subMenuSelector = 'ul.sub-menu';\n          var $subMenus = $navigationContainer.find(subMenuSelector);\n          var $subMenuItems = $navigationContainer.find('.side-nav-menu>li');\n          if ($navigationContainer.hasClass('collapsed')) {\n            // set sub menu invisible when collapsed\n            $subMenus.hide();\n            $moreActions.hide();\n            // set the hover effect when collapsed, should show sub-menu on hovering\n            $subMenuItems.hover(function () {\n              $(this).find(subMenuSelector).show();\n              // set sub-menu position\n              var $parent = $(this);\n              var $header = $('.side-nav-header');\n              if (settings.fitHeight) {\n                $(this).find(subMenuSelector).css({\n                  position: 'fixed',\n                  top: $parent.offset().top - $header.offset().top + 'px',\n                  left: 50 + 'px'\n                });\n              }\n            }, function () {\n              $(this).find(subMenuSelector).hide();\n            });\n          } else {\n            // keep showing all sub menu\n            $subMenus.show().each(function (index, item) {\n              return $(item).parent().removeClass('collapsed');\n            });\n            $subMenuItems.unbind('mouseenter mouseleave');\n            $navigationContainer.find('.toggle-icon').removeClass(settings.menuLeftClass).addClass(settings.menuDownClass);\n            // set sub-menu position\n            if (settings.fitHeight) {\n              $(_this).find(subMenuSelector).css({\n                position: 'relative',\n                top: 0,\n                left: 0\n              });\n            }\n          }\n\n          $navigationContainer.on('transitionend', function () {\n            //set main content left margin based on the width of side-nav\n            var containerWidth = $navigationContainer.width();\n            if (settings.moveLeftContent) {\n              $(settings.content).css('margin-left', containerWidth);\n            }\n            if (settings.moveLeftFooter) {\n              $(settings.footer).css('margin-left', containerWidth);\n            }\n          });\n          $sideNavToggler.find('span').toggleClass(settings.collapseNavBarClass + ' ' + settings.expandNavBarClass);\n        });\n        return false;\n      });\n    });\n  };\n\n  $.fn.navigationBar.defaults = {\n    handlePopState: true,\n    fitHeight: false,\n    content: '#main',\n    footer: 'footer',\n    moveLeftContent: true,\n    moveLeftFooter: true,\n    menuLeftClass: 'glyphicon-menu-right',\n    menuDownClass: 'glyphicon-menu-down',\n    collapseNavBarClass: 'fa-angle-double-left',\n    expandNavBarClass: 'fa-angle-double-right',\n    activeClass: 'active',\n    navBarToggleDataAttr: 'collapse-side-nav',\n    subMenuNavToggleDataAttr: 'collapse-sub-menu'\n  };\n})(jQuery);",
    "repo": "apache/hadoop",
    "path": "/base/datasets/diagrams-repos/apache/hadoop/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-applications-catalog/hadoop-yarn-applications-catalog-webapp/src/main/webapp/js/bootstrap-hadoop.js",
    "query": "What is the structure of the navigation bar, including the main menu and submenus?",
    "diagram": "{'nodes': [{'type': 'function', 'name': 'navigationBar', 'node_id': 'navigationBar', 'description': 'Main jQuery plugin for navigation bars', 'visibility': 'public', 'return_type': 'jQuery', 'params': 'options', 'source_class_id': None}, {'type': 'entity', 'name': 'mainMenu', 'node_id': 'mainMenu', 'description': 'First level navigation menu', 'visibility': 'public', 'return_type': None, 'params': None, 'source_class_id': None}, {'type': 'entity', 'name': 'subMenu', 'node_id': 'subMenu', 'description': 'Second level navigation menu', 'visibility': 'public', 'return_type': None, 'params': None, 'source_class_id': None}], 'edges': [{'node_id_from': 'navigationBar', 'node_id_to': 'mainMenu', 'description': 'manages'}, {'node_id_from': 'mainMenu', 'node_id_to': 'subMenu', 'description': 'contains'}], 'packages': [{'package_id': 'navigationStructure', 'children': ['navigationBar', 'mainMenu', 'subMenu'], 'description': 'Core navigation components'}]}",
    "version": "minimal",
    "text_answer": "The navigation bar consists of a main menu with first-level items and submenus for second-level navigation. It includes collapsible sections, more actions dropdown, and supports both click and hover interactions. The structure can be expanded/collapsed, and submenus can be toggled independently.",
    "possible_versions": [
      "minimal"
    ]
  }
]